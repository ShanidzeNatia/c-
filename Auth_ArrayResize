using System;

namespace G12UserManagement
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //false
            User user1 = new User("nika1998", "12312300");
            //user1.Username = "nika1998";
            //user1.Password = "12312300";
            Console.WriteLine(UserManager.Register(user1)); //0
            Console.WriteLine(UserManager.Register(user1)); //2
            //User user2 = new User() { Username = "Nino9796", Password = "97961234" };
            User user2 = new User("Nino9796", "97961234");
            Console.WriteLine(UserManager.Register(user2)); //0
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //true
            Console.WriteLine(UserManager.Login("nika1998", "12312301")); //false
            Console.WriteLine(UserManager.UnRegister("nikusha1998")); //false
            Console.WriteLine(UserManager.UnRegister("nika1998")); //true
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //false
        }
    }

    class User
    {
        public User(string username, string password)
        {
            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                throw new ArgumentException("Username and password must not be empty");
            }

            if (username.Length < 8 || password.Length < 8)
            {
                throw new ArgumentException("Username and password must be at least 8 characters long");
            }

            Username = username;
            Password = password;
        }

        public string Username { get; private init; }
        public string Password { get; private init; }
    }

    static class UserManager
    {
        private static User?[] _users = new User?[0];

        public static int Register(User? user)
        {
            if (user == null)
            {
                return 1;
            }

            if (UsernameExists(user.Username))
            {
                return 2;
            }

            int emptyIndex = GetEmptyIndex();
            // თუ მასივი შეივსო დაამატოს ახალი ელემენტი და მაინც დაარეგისტრიროს.
            if (emptyIndex == -1)
            {
                int newSize = _users.Length + 1;
                User?[] newUsersArray = new User?[newSize];
                for (int i = 0; i < _users.Length; i++)
                {
                    newUsersArray[i] = _users[i];
                }

                _users = newUsersArray;

                emptyIndex = _users.Length - 1;
            }

            _users[emptyIndex] = user;
            return 0;
        }

        public static bool Login(string username, string password)
        {
            User? user = GetUserByUsername(username);
            if (user?.Password == password)
            {
                return true;
            }

            return false;
        }

        public static bool UnRegister(string username)
        {
            int index = GetIndexByUsername(username);
            if (index != -1)
            {
                _users[index] = null;
                return true;
            }

            return false;
        }

        private static int GetIndexByUsername(string username)
        {
            for (int i = 0; i < _users.Length; i++)
            {
                if (_users[i]?.Username == username)
                {
                    return i;
                }
            }

            return -1;
        }

        private static User? GetUserByUsername(string username)
        {
            int index = GetIndexByUsername(username);
            return index != -1 ? _users[index] : null;
        }

        private static bool UsernameExists(string username)
        {
            return GetIndexByUsername(username) != -1;
        }

        private static int GetEmptyIndex()
        {
            for (int i = 0; i < _users.Length; i++)
            {
                if (_users[i] == null)
                {
                    return i;
                }
            }
            return -1;
        }
    }
}
