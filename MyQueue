using System.Collections;
using System.Collections.Generic;

namespace G11_20250409
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Queue queue = new Queue();
            //queue.Enqueue("Rati");
            //queue.Enqueue("Ana");
            //queue.Enqueue("Nuca");
            //queue.Enqueue("Keti");

            //Console.WriteLine("Stack elements:");
            //while (queue.Count > 0)
            //{
            //    Console.WriteLine(queue.Dequeue());
            //}

            //Stack stack = new Stack();
            //stack.Push("Rati");
            //stack.Push("Ana");
            //stack.Push("Nuca");
            //stack.Push("Keti");

            //Console.WriteLine("Stack elements:");
            //while (stack.Count > 0)
            //{
            //    Console.WriteLine(stack.Pop());
            //}

            //MyStack stack = new MyStack();
            //stack.Push("Rati");
            //stack.Push("Ana");
            //stack.Push("Nuca");
            //stack.Push("Keti");

            //Console.WriteLine("Peek:");
            //Console.WriteLine($"{stack.Peek()}\n");

            //Console.WriteLine("Stack elements:");
            //while (stack.Count > 0)
            //{
            //    Console.WriteLine(stack.Pop());
            //}

            MyQueue queue = new MyQueue();
            queue.Enqueue("Rati");
            queue.Enqueue("Ana");
            queue.Enqueue("Nuca");
            queue.Enqueue("Keti");

            Console.WriteLine("Peek:");
            Console.WriteLine($"{queue.Peek()}\n");

            Console.WriteLine("Stack elements:");
            while (queue.Count > 0)
            {
                Console.WriteLine(queue.Dequeue());
            }

            //MyQueue queue = new MyQueue();
            //queue.Enqueue("A");
            //queue.Enqueue("B");
            //queue.Enqueue("C");

            //Console.WriteLine(queue.Peek());   // "A"
            //Console.WriteLine(queue.Dequeue()); // "A"
            //Console.WriteLine(queue.Dequeue()); // "B"

            //queue.Enqueue("D");
            //queue.Enqueue("E");
            //Console.WriteLine(queue.Peek());   // "C"
            //Console.WriteLine(queue.Dequeue()); // "C"
            //Console.WriteLine(queue.Peek());   // "D"
        }
    }

    class MyStack
    {
        private object[] _items;

        public MyStack()
        {
            _items = new object[0];
        }

        public void Push(object item)
        {
            //todo: Replace with own implementation
            Array.Resize(ref _items, _items.Length + 1);
            _items[_items.Length - 1] = item;
        }

        public object Pop()
        {
            object item = Peek();
            //todo: Replace with own implementation
            Array.Resize(ref _items, _items.Length - 1);
            return item;
        }

        public object Peek()
        {
            if (_items.Length == 0)
            {
                throw new InvalidOperationException("Stack is empty");
            }
            return _items[_items.Length - 1];
        }

        public int Count
        {
            get
            {
                return _items.Length;
            }
        }
    }

    class MyQueue
    {
        private object[] _items = new object[0];

        public void Enqueue(object item)
        {
            MyArray.Resize(ref _items, _items.Length + 1);
            _items[_items.Length - 1] = item;
        }

        public object Dequeue()
        {
            object item = Peek();
            object[] newArray = new object[_items.Length - 1];

            for (int i = 1; i < _items.Length; i++)
            {
                newArray[i - 1] = _items[i];
            }
            _items = newArray;

            return item;
        }

        public object Peek()
        {
            if (_items.Length == 0)
            {
                throw new InvalidOperationException("MyQueue is empty");
            }
            return _items[0];
        }

        public int Count
        {
            get
            {
                return _items.Length;
            }
        }
    }

    static class MyArray
    {
        public static void Resize(ref object[] array, int newSize)
        {
            object[] newArray = new object[newSize];
            int length = array.Length < newSize ? array.Length : newSize;
            for (int i = 0; i < length; i++)
            {
                newArray[i] = array[i];
            }
            array = newArray;
        }
    }
}
