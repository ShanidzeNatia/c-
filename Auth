using System.Diagnostics;

namespace G12UserManagement
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //false
            User user1 = new User("nika1998", "12312300");
            //user1.Username = "nika1998";
            //user1.Password = "12312300";
            Console.WriteLine(UserManager.Register(user1)); //0
            Console.WriteLine(UserManager.Register(user1)); //2
            //User user2 = new User() { Username = "Nino9796", Password = "97961234" };
            User user2 = new User("Nino9796", "97961234");
            Console.WriteLine(UserManager.Register(user2)); //0
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //true
            Console.WriteLine(UserManager.Login("nika1998", "12312301")); //false
            Console.WriteLine(UserManager.UnRegister("nikusha1998")); //false
            Console.WriteLine(UserManager.UnRegister("nika1998")); //true
            Console.WriteLine(UserManager.Login("nika1998", "12312300")); //false        }
        }
    }

    // davadot dacva, rom Username-ze da parolze ar sheizlebodes null-is an
    // 8 simboloze ufro naklebi mnishvnelobis minicheba.
    class User
    {
        public User(string username, string password)
        {
            ValidateInput(username, "Username");
            ValidateInput(password, "Password");

            Username = username;
            Password = password;
        }

        public string Username{ get; private init; }
        public string Password{ get; private set; }

        private string ValidateInput(string value, string fieldName)
        {
            if (string.IsNullOrEmpty(value))
            {
                throw new ArgumentNullException(nameof(value), $"{fieldName} cannot be null or empty!");
            }

            if (value.Length < 8)
            {
                throw new ArgumentException($"{fieldName} must be at least 8 characters long!", nameof(value));
            }

            return value;
        }

        public void ChangePassword(string oldPassword, string newPassword)
        {
            if (oldPassword != Password)
                throw new Exception("Old password is incorrect.");
            ValidateInput(newPassword, "newPassword");
            Password = newPassword;
        }
    }

    static class UserManager
    {
        public static User?[] _users = new User?[10];

        public static int Register(User user)
        {
            /* ფუნქციამ უნდა მოძებნოს _user-ის მასივში პირველი თავისუფალი ელემენტი (ანუ ელემენტი
            * რომლის მნიშვნელობაც null-ის ტოლია) და მიანიჭოს მას გადმოცემული user-ის ობიექტი (პარამეტრი user).
            * ოღონდ, უნდა გაითვალისწინოს შემდეგი პირობები:
            * 1. გადმოცემულ პარამეტრში რომ არ იყოს null-ი და უეჭველი უნდა იყოს username და password.
            *    თუ პარამეტრები არაა მოწოდებული, შეწყვიტოს რეგისტრაცია და დააბრუნოს 1.
            * 2. გადაამოწმოს რომ username იყოს უნიკალური, ანუ თუ რომელიმე ელემენტს გააჩნია იგივე სახელის username
            *    შეწყვიტოს რეგისტრაცია და დააბრუნოს 2.
            * 3. თუ მასივში აღარაა ცარიელი ელემენტები (ანუ შეივსო ათივე), მაშინ დააბრუნოს 3.
            * თუ არცერთი ზედა შემთხვევა არ მოხდა დაარეგისტრიროს მომხმარებელი (მიანიჭოს მასივის ელემენტს)
            * და დააბრუნოს 0.
            */

            if (user.Username == null || user.Password == null) return 1;
            if (FindUser(user.Username) != null) return 2;
            if (EmptyElementIndex() == -1) return 3;

            _users[EmptyElementIndex()] = user;

            return 0;
        }

        public static bool IsEmptyUser()
        {
            return (_users.Any() ? false : true);
        }

        public static int EmptyElementIndex()
        {
            for (int i = 0; i < _users.Length; i++)
            {
                if (_users[i] == null)
                {
                    return i;
                }
            }
            return -1;
        }

        public static bool Login(string username, string password)
        {
            /* ფუნქციამ უნდა მოძებნოს არსებობს თუ არა _users-ის მასივში ჩანაწერი (ელემენტი),
            * რომელსაც გააჩნია იგივე Username და password რაც გადმოგვცეს პარამეტრებში.
            * თუ ასეთი ჩანაწერი იპოვა დააბრუნოს true, წინააღმდეგ შემთხვევაში false. */

            return (FindUser(username, password) != null ? true : false);
        }

        public static bool UnRegister(string username)
        {
            /*  ფუნქციამ უნდა მოძებნოს არსებობს თუ არა _users-ის მასივში ჩანაწერი (ელემენტი),
            * რომელსაც გააჩნია იგივე Username რაც გადმოგვცეს პარამეტრში.
            * თუ ასეთი ჩანაწერი იპოვა მასივის ელემენტზე მიანიჭოს null (რაშიც ვგულისხმობთ წაშლას)
            * და დააბრუნოს true, წინააღმდეგ შემთხვევაში false.*/
            var user = FindUser(username);
            if (user != null)
            {
                for (int i = 0; i < _users.Length; i++)
                {
                    if (_users[i] == user)
                    {
                        _users[i] = null;
                        return true;
                    }
                }
            }
            return false;
        }

        public static User? FindUser(string username)
        {
            if (!IsEmptyUser())
            {
                for (int i = 0; i < _users.Length; i++)
                {
                    if (_users[i] != null && _users[i]?.Username == username)
                    {
                        return _users[i];
                    }
                }
                return null;
            }
            return null;
        }

        public static User? FindUser(string username, string password)
        {
            if (!IsEmptyUser())
            {
                for (int i = 0; i < _users.Length; i++)
                {
                    if (_users[i] != null && _users[i]?.Username == username && _users[i]?.Password == password)
                    {
                        return _users[i];
                    }
                }
                return null;
            }
            return null;
        }

    }
}
